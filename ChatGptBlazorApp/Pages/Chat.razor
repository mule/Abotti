@page "/Chat"
@page "/Chat/{PromptId:guid}"
@using ServiceAccessLayer.AiServices
@using Blazored.Toast.Services
@inject OpenAiClient OpenAiClient
@inject IToastService ToastService

<h3>Chat</h3>
<div>
    @PromptId.ToString()
</div>
<form onsubmit="@Send">
    <div class="row">
        <div class="mb-3">
            <label for="chatTopic" class="form-label">Topic</label>
            <input type="text" class="form-control" id="chatTopic" @bind="_chatTopic">
        </div>
    </div>
    <div class="row">
        <textarea class="form-control"  id="chatInput" @bind="_currentPrompt"></textarea>
    </div>
    <div class="row">
        <div class="col-md-1">
            <button type="submit" class="form-control mt-2 btn btn-primary">Send</button>
        </div>
    </div>
</form>


@if (_waitingForResponse)
{
    <div class="row m-1">Waiting for response....</div>
}
<div class="row" id="chatOutput">
    <ul>
        @foreach (var reply in replies)
        {
            <li>@reply.Role: @reply.Message</li>
        }
    </ul>
</div>


@code {

    [Parameter]
    public Guid? PromptId { get; set; }

    bool _waitingForResponse;
    string _currentPrompt = "";
    string _chatTopic = "";

    readonly List<(string Role, string Message)> replies = new();

    private async Task Send()
    {
        _waitingForResponse = true;
        replies.Add(("user", _currentPrompt));
        var result = await OpenAiClient.GetCompletion(replies, _currentPrompt);

        if (result.Success)
            replies.Add(("assistant", result.Response));
        else
        {
            ToastService.ShowError(result.Errors.First());
        }
        var topicResponse = await OpenAiClient.GetChatTopic(replies.ToArray());
        if (topicResponse.Success)
            _chatTopic = topicResponse.Response;
        else
        {
            ToastService.ShowError(topicResponse.Errors.First());
        }
        _currentPrompt = string.Empty;
        _waitingForResponse = false;
    }

}