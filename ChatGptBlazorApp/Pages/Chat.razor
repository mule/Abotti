@page "/Chat"
@page "/Chat/{PromptId:guid}"
@using ChatGptBlazorApp.AiServices
@using Blazored.Toast.Services
@inject OpenAiClient OpenAiClient
@inject IToastService ToastService

<h3>Chat</h3>
<div>
    @PromptId.ToString()
</div>
<form onsubmit="@Send">
    <div class="row">
        <textarea class="form-control"  id="chatInput" @bind="currentPrompt"></textarea>
    </div>
    <div class="row">
        <div class="col-md-1">
            <button type="submit" class="form-control mt-2 btn btn-primary">Send</button>
        </div>
    </div>
</form>


@if (waitingForResponse)
{
    <div class="row m-1">Waiting for response....</div>
}
<div class="row" id="chatOutput">
    <ul>
        @foreach (var reply in replies)
        {
            <li>@reply</li>
        }
    </ul>
</div>


@code {

    [Parameter]
    public Guid? PromptId { get; set; }

    bool waitingForResponse;
    string currentPrompt = "";
    readonly List<string> replies = new();

    private async Task Send()
    {
        waitingForResponse = true;
        replies.Add($"User: {currentPrompt}");
        var result = await OpenAiClient.GetCompletion(currentPrompt);

        if (result.Success)
            replies.Add(result.Response);
        else
        {
            ToastService.ShowError(result.Errors.First());
        }
        currentPrompt = string.Empty;
        waitingForResponse = false;
    }

}