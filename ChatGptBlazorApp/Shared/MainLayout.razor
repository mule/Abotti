@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserRepository UserRepository
@inject IChatSessionRepository ChatSessionRepository
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@using ChatGptBlazorCore.Models
@using Blazored.Toast.Services
@inherits LayoutComponentBase


<PageTitle>ChatGptBlazorApp</PageTitle>
<BlazoredToasts/>
<ErrorBoundary>
    <CascadingAuthenticationState>
        <div class="page">
            <main>
                <div class="top-row navbar px-4 d-flex justify-content-between   w-100">
                    <div>
                        <a class="navbar-brand" href="">Abotti - your personal bot assistant</a>
                    </div>
                    <div class="d-flex align-items-center">
                        <AuthorizeView>
                            <Authorized>
                                <p class="mx-3 mb-0">
                                    Hello, @context.User.Identity.Name!
                                    <span class="badge bg-secondary">@(UserVerified ? "Verified" : "Not verified")</span>
                                    <a href="MicrosoftIdentity/Account/SignOut" class="btn btn-primary">Log out</a>
                                </p>
                            </Authorized>
                            <NotAuthorized>
                                <button class="btn btn-primary mx-3" href="MicrosoftIdentity/Account/SignIn">Login</button>
                            </NotAuthorized>
                        </AuthorizeView>
                    </div>
                </div>
                <article class="content px-4">
                    @Body
                </article>
            </main>
        </div>

    </CascadingAuthenticationState>
</ErrorBoundary>

@code {

    public bool UserVerified { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var principal = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var queryResult = await UserRepository.GetByNameAsync(principal.User.Identity.Name);

        if (queryResult.Ok && queryResult.Result != null)
            UserVerified = true;
        else
        {
            ToastService.ShowError("Unable to get user info. Please try again later.");
        }
    }






}

```