@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserRepository UserRepository
@inject IChatSessionRepository ChatSessionRepository
@inject NavigationManager NavigationManager
@inject IToastService ToastService
@inject IStringLocalizer<MainLayout> Loc
@using ChatGptBlazorCore.Models
@using Blazored.Toast.Services
@inherits LayoutComponentBase


<PageTitle>ChatGptBlazorApp</PageTitle>
<BlazoredToasts/>
<ErrorBoundary>
    <CascadingAuthenticationState>
        <div class="page">
            <main>
                <nav class="top-row navbar  navbar-dark bg-dark">
                    <a class="navbar-brand p-2" href="">Abotti - @Loc["SiteDescription"]</a>
                    <AuthorizeView>
                        <Authorized>
                            <NavLink class="p-2" href="Chat">@Loc["ChatPageLink"]</NavLink>
                            <div class="ms-auto p-2">
                                <a class="nav-item" href="/UserProfile/@CurrentUser.Id.ToString()">@context.User.Identity.Name</a>
                                <span class="badge bg-secondary">@(UserVerified ? Loc["Verfied"] : Loc["NotVerified"])</span>
                                <a href="MicrosoftIdentity/Account/SignOut" class="btn-sm btn-primary">@Loc["LogOut"]</a>
                            </div>
                        </Authorized>
                        <NotAuthorized>
                            <div class="d-flex">
                                <button class="btn btn-primary mx-3" href="MicrosoftIdentity/Account/SignIn">Login</button>
                            </div>
                        </NotAuthorized>
                    </AuthorizeView>
                </nav>
                <article class="content px-4">
                    @Body
                </article>
            </main>
        </div>

    </CascadingAuthenticationState>
</ErrorBoundary>

@code {


    public bool UserVerified { get; set; }
    public User CurrentUser { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var principal = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var queryResult = await UserRepository.GetByNameAsync(principal.User.Identity.Name);

        if (queryResult.Ok && queryResult.Result != null)
        {
            UserVerified = true;
            CurrentUser = queryResult.Result;
        }
        else
        {
            ToastService.ShowError("Unable to get user info. Please try again later.");
        }
    }






}

```