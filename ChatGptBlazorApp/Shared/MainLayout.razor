@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserRepository UserRepository
@inject IChatSessionRepository ChatSessionRepository
@using ChatGptBlazorCore.Models
@inherits LayoutComponentBase


<PageTitle>ChatGptBlazorApp</PageTitle>
<BlazoredToasts/>
<ErrorBoundary>
    <CascadingAuthenticationState>
        <div class="page">
            <div class="sidebar">
                <CascadingValue Value="@ChatSessionTopics">
                    <NavMenu/>
                </CascadingValue>
            </div>
            <main>
                <div class="top-row px-4 d-flex justify-content-end align-items-center w-100">
                    <div class="d-flex align-items-center">
                        <a class="mx-3" href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
                        <AuthorizeView>
                            <Authorized>
                                @UserVerified.ToString()
                                <p class="mx-3 mb-0">
                                    Hello, @context.User.Identity.Name!
                                    <span class="badge bg-secondary">@(UserVerified ? "Verified" : "Not verified")</span>
                                </p>
                            </Authorized>
                            <NotAuthorized>
                                <button class="btn btn-primary mx-3" href="MicrosoftIdentity/Account/SignIn">Login</button>
                            </NotAuthorized>
                        </AuthorizeView>
                    </div>
                </div>
                <article class="content px-4">
                    @Body
                </article>
            </main>
        </div>

    </CascadingAuthenticationState>
</ErrorBoundary>

@code {

    public bool UserVerified { get; set; }
    public (Guid Id, string Topic, DateTime Created)[] ChatSessionTopics { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        UserVerified = false;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userName = authState.User.Identity?.Name;
        if (userName != null)
        {
            var user = UserRepository.GetUser(userName);
            if (user != null)
            {
                UserVerified = true;

                ChatSessionTopics = ChatSessionRepository.GetUserChatSessionTopics(user.Id);
            }
        }
    }




}

```