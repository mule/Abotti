@using FluentAssertions
@using BlazorComponentBus
@using Abotti.BlazorComponents
@using Abotti.BlazorComponents.Contracts
@inherits TestContext

@code {

    [Fact]
    public void ChatSessionListRow_should_render_successfully()
    {
        // Arrange

        Services.AddScoped<ComponentBus>();
        // Act
        var action = () => Render(@<ChatSessionListRow/>);

        // Assert
        action.Should().NotThrow();
    }

    [Fact]
    public void ChatSessionListRow_should_show_chat_topic()
    {
        // Arrange
        var testTopic = "Test topic";
        Services.AddScoped<ComponentBus>();

        // Act
        var cut = Render(@<ChatSessionListRow Topic="@testTopic"/>);

        // Assert
        cut.Markup.Should().Contain(testTopic);
    }

    [Fact]
    public void ChatSessionListRow_should_show_chat_session_id()
    {
        // Arrange
        var testSessionId = Guid.NewGuid();
        Services.AddScoped<ComponentBus>();

        // Act
        var cut = Render(@<ChatSessionListRow SessionId="@testSessionId"/>);

        // Assert
        cut.Markup.Should().Contain(testSessionId.ToString());
    }


    [Fact]
    public void ChatSessionListRow_should_publish_delete_event()
    {
        // Arrange
        var testSessionId = Guid.NewGuid();
        var eventFired = false;
        Services.AddScoped<ComponentBus>();

        var bus = Services.GetService(typeof(ComponentBus)) as ComponentBus;

        bus.Subscribe<ChatSessionDeleteRequest>(async (args, ct) =>
        {
            eventFired = true;
            var msg = args.GetMessage<ChatSessionDeleteRequest>();
            msg.SessionId.Should().Be(testSessionId);
        });

        // Act
        var cut = Render(@<ChatSessionListRow SessionId="@testSessionId"/>);

        var deleteButton = cut.Find("button");
        deleteButton.Click();
        eventFired.Should().BeTrue();
    }

}